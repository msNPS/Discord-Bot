import discord
from discord.ext import commands
from discord_slash import cog_ext
from discord_slash.utils.manage_commands import create_option
from discord_slash.utils import manage_components as Components
from discord_slash.model import ButtonStyle
import configparser
import random

client = commands.Bot(command_prefix='', intents=discord.Intents.all())

config = configparser.ConfigParser()
config.read('config.ini', encoding='utf8')
answer_ball = list(config['Answer']['ball'].split('; '))
answer_money = list(config['Answer']['money'].split('; '))
guild_id = int(config['Main']['guild_id'])
guild_ids = [guild_id]


class FunCommands(commands.Cog):

  def __init__(self, client):
    self.client = client


  @cog_ext.cog_slash(name='Ping', description='Sends bot\'s latency', guild_ids=guild_ids)
  async def ping(self, ctx):
    embed = discord.Embed(colour=discord.Color.blue())
    embed.title = 'üì∂ –ó–∞–¥–µ—Ä–∂–∫–∞: ' + str(int(self.client.latency * 1000)) + 'ms'
    await ctx.send(embed=embed)


  @cog_ext.cog_slash(name='Ball', description='–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä', guild_ids=guild_ids,
    options=[
      create_option(name='–≤–æ–ø—Ä–æ—Å', description='–í–æ–ø—Ä–æ—Å –ú–∞–≥–∏—á–µ—Å–∫–æ–º—É —à–∞—Ä—É', required=False, option_type=3)
    ]
  )
  async def ball(self, ctx, –≤–æ–ø—Ä–æ—Å: str):
    embed = discord.Embed(colour=discord.Color.purple())
    embed.title = 'üîÆ ' + random.choice(answer_ball)
    if –≤–æ–ø—Ä–æ—Å:
      embed.description = f'–í–æ–ø—Ä–æ—Å: {–≤–æ–ø—Ä–æ—Å}'
    await ctx.send(embed=embed)


  @cog_ext.cog_slash(name='Roll', description='–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ', guild_ids=guild_ids,
    options=[
      create_option(name='—á–∏—Å–ª–æ', description='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ', required=True, option_type=4)
    ]
  )
  async def roll(self, ctx, —á–∏—Å–ª–æ: int):
    embed = discord.Embed(colour=discord.Color.dark_blue())
    embed.title = 'üîò –†–µ–∑—É–ª—å—Ç–∞—Ç: ' + str(random.randint(1, —á–∏—Å–ª–æ))
    embed.description = f'–°—Ä–µ–¥–∏ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ {str(—á–∏—Å–ª–æ)}'
    await ctx.send(embed=embed)


  @cog_ext.cog_slash(name='Pick', description='–í—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤', guild_ids=guild_ids,
    options=[
      create_option(name='–≤–∞—Ä–∏–∞–Ω—Ç—ã', description='–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é', required=True, option_type=3)
    ]
  )
  async def pick(self, ctx, –≤–∞—Ä–∏–∞–Ω—Ç—ã: str):
    embed = discord.Embed(colour=discord.Color.dark_teal())
    embed.title = 'üí† –†–µ–∑—É–ª—å—Ç–∞—Ç: ' + str(random.choice(–≤–∞—Ä–∏–∞–Ω—Ç—ã.split(',')))
    embed.description = f'–í–∞—Ä–∏–∞–Ω—Ç—ã: {–≤–∞—Ä–∏–∞–Ω—Ç—ã}'
    await ctx.send(embed=embed)


  @cog_ext.cog_slash(name='Coin', description='–û—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞', guild_ids=guild_ids)
  async def fun_money(self, ctx):
    embed = discord.Embed(colour=discord.Color.gold())
    embed.title = random.choice(answer_money)
    await ctx.send(embed=embed)


  @cog_ext.cog_slash(name='Rock', description='–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞', guild_ids=guild_ids)
  async def rock(self, ctx):
    while True:
      buttons = [
        Components.create_button(label='üóø–ö–∞–º–µ–Ω—å', style=ButtonStyle.blurple, custom_id='0'),
        Components.create_button(label='‚úÇÔ∏è–ù–æ–∂–Ω–∏—Ü—ã', style=ButtonStyle.blurple, custom_id='1'),
        Components.create_button(label='üßª–ë—É–º–∞–≥–∞', style=ButtonStyle.blurple, custom_id='2')
      ]
      embed = discord.Embed(colour=discord.Colour.blurple())
      embed.title = 'üëä –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞'
      embed.description = '–ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'
      actionrow = Components.create_actionrow(*buttons)
      await ctx.send(embed=embed, components=[actionrow])

      first = await Components.wait_for_component(self.client, components=actionrow)
      await first.edit_origin()
      second = await Components.wait_for_component(self.client, components=actionrow)
      if first.custom_id == second.custom_id:
        embed.title = 'üëä __–ù–∏—á—å—è__'
      elif (first.custom_id=='0' and second.custom_id=='1') or (first.custom_id=='1' and second.custom_id=='2') or (first.custom_id=='2' and second.custom_id=='0'):
        embed.title = f'üëä __{first.author.name}__ –ø–æ–±–µ–¥–∏–ª!'
      else:
        embed.title = f'üëä __{second.author.name}__ –ø–æ–±–µ–¥–∏–ª!'

      embed.description = ''
      buttons = [Components.create_button(label='üîÅ–ó–∞–Ω–æ–≤–æ', style=ButtonStyle.blurple, custom_id='replay')]
      actionrow = Components.create_actionrow(*buttons)
      chooser = {'0': 'üóø–ö–∞–º–µ–Ω—å', '1': '‚úÇÔ∏è–ù–æ–∂–Ω–∏—Ü—ã', '2': 'üßª–ë—É–º–∞–≥–∞'}
      embed.add_field(name=first.author.name+':', value=chooser[first.custom_id], inline=False)
      embed.add_field(name=second.author.name+':', value=chooser[second.custom_id], inline=False)
      await second.edit_origin(embed=embed, components=[actionrow])

      replay = await Components.wait_for_component(self.client, components=actionrow)
      await replay.edit_origin()


def setup(client):
  client.add_cog(FunCommands(client))